// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.2
// source: api/compute/v1/compute_power_client.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationComputePowerClientCancelExecPythonPackage = "/api.compute.v1.ComputePowerClient/CancelExecPythonPackage"
const OperationComputePowerClientRunPythonPackage = "/api.compute.v1.ComputePowerClient/RunPythonPackage"

type ComputePowerClientHTTPServer interface {
	// CancelExecPythonPackage取消执行
	CancelExecPythonPackage(context.Context, *CancelExecPythonPackageClientRequest) (*CancelExecPythonPackageClientReply, error)
	// RunPythonPackage执行脚本
	RunPythonPackage(context.Context, *RunPythonPackageClientRequest) (*RunPythonPackageClientReply, error)
}

func RegisterComputePowerClientHTTPServer(s *http.Server, srv ComputePowerClientHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/compute-power/client/python", _ComputePowerClient_RunPythonPackage0_HTTP_Handler(srv))
	r.POST("/v1/compute-power/client/python/cancel", _ComputePowerClient_CancelExecPythonPackage0_HTTP_Handler(srv))
}

func _ComputePowerClient_RunPythonPackage0_HTTP_Handler(srv ComputePowerClientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RunPythonPackageClientRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationComputePowerClientRunPythonPackage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RunPythonPackage(ctx, req.(*RunPythonPackageClientRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RunPythonPackageClientReply)
		return ctx.Result(200, reply)
	}
}

func _ComputePowerClient_CancelExecPythonPackage0_HTTP_Handler(srv ComputePowerClientHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CancelExecPythonPackageClientRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationComputePowerClientCancelExecPythonPackage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CancelExecPythonPackage(ctx, req.(*CancelExecPythonPackageClientRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CancelExecPythonPackageClientReply)
		return ctx.Result(200, reply)
	}
}

type ComputePowerClientHTTPClient interface {
	CancelExecPythonPackage(ctx context.Context, req *CancelExecPythonPackageClientRequest, opts ...http.CallOption) (rsp *CancelExecPythonPackageClientReply, err error)
	RunPythonPackage(ctx context.Context, req *RunPythonPackageClientRequest, opts ...http.CallOption) (rsp *RunPythonPackageClientReply, err error)
}

type ComputePowerClientHTTPClientImpl struct {
	cc *http.Client
}

func NewComputePowerClientHTTPClient(client *http.Client) ComputePowerClientHTTPClient {
	return &ComputePowerClientHTTPClientImpl{client}
}

func (c *ComputePowerClientHTTPClientImpl) CancelExecPythonPackage(ctx context.Context, in *CancelExecPythonPackageClientRequest, opts ...http.CallOption) (*CancelExecPythonPackageClientReply, error) {
	var out CancelExecPythonPackageClientReply
	pattern := "/v1/compute-power/client/python/cancel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationComputePowerClientCancelExecPythonPackage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ComputePowerClientHTTPClientImpl) RunPythonPackage(ctx context.Context, in *RunPythonPackageClientRequest, opts ...http.CallOption) (*RunPythonPackageClientReply, error) {
	var out RunPythonPackageClientReply
	pattern := "/v1/compute-power/client/python"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationComputePowerClientRunPythonPackage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
