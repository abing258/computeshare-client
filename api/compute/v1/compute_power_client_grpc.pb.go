// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: api/compute/v1/compute_power_client.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ComputePowerClient_RunPythonPackage_FullMethodName        = "/api.compute.v1.ComputePowerClient/RunPythonPackage"
	ComputePowerClient_CancelExecPythonPackage_FullMethodName = "/api.compute.v1.ComputePowerClient/CancelExecPythonPackage"
)

// ComputePowerClientClient is the client API for ComputePowerClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComputePowerClientClient interface {
	// 执行脚本
	RunPythonPackage(ctx context.Context, in *RunPythonPackageClientRequest, opts ...grpc.CallOption) (*RunPythonPackageClientReply, error)
	// 取消执行
	CancelExecPythonPackage(ctx context.Context, in *CancelExecPythonPackageClientRequest, opts ...grpc.CallOption) (*CancelExecPythonPackageClientReply, error)
}

type computePowerClientClient struct {
	cc grpc.ClientConnInterface
}

func NewComputePowerClientClient(cc grpc.ClientConnInterface) ComputePowerClientClient {
	return &computePowerClientClient{cc}
}

func (c *computePowerClientClient) RunPythonPackage(ctx context.Context, in *RunPythonPackageClientRequest, opts ...grpc.CallOption) (*RunPythonPackageClientReply, error) {
	out := new(RunPythonPackageClientReply)
	err := c.cc.Invoke(ctx, ComputePowerClient_RunPythonPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computePowerClientClient) CancelExecPythonPackage(ctx context.Context, in *CancelExecPythonPackageClientRequest, opts ...grpc.CallOption) (*CancelExecPythonPackageClientReply, error) {
	out := new(CancelExecPythonPackageClientReply)
	err := c.cc.Invoke(ctx, ComputePowerClient_CancelExecPythonPackage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComputePowerClientServer is the server API for ComputePowerClient service.
// All implementations must embed UnimplementedComputePowerClientServer
// for forward compatibility
type ComputePowerClientServer interface {
	// 执行脚本
	RunPythonPackage(context.Context, *RunPythonPackageClientRequest) (*RunPythonPackageClientReply, error)
	// 取消执行
	CancelExecPythonPackage(context.Context, *CancelExecPythonPackageClientRequest) (*CancelExecPythonPackageClientReply, error)
	mustEmbedUnimplementedComputePowerClientServer()
}

// UnimplementedComputePowerClientServer must be embedded to have forward compatible implementations.
type UnimplementedComputePowerClientServer struct {
}

func (UnimplementedComputePowerClientServer) RunPythonPackage(context.Context, *RunPythonPackageClientRequest) (*RunPythonPackageClientReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPythonPackage not implemented")
}
func (UnimplementedComputePowerClientServer) CancelExecPythonPackage(context.Context, *CancelExecPythonPackageClientRequest) (*CancelExecPythonPackageClientReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelExecPythonPackage not implemented")
}
func (UnimplementedComputePowerClientServer) mustEmbedUnimplementedComputePowerClientServer() {}

// UnsafeComputePowerClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComputePowerClientServer will
// result in compilation errors.
type UnsafeComputePowerClientServer interface {
	mustEmbedUnimplementedComputePowerClientServer()
}

func RegisterComputePowerClientServer(s grpc.ServiceRegistrar, srv ComputePowerClientServer) {
	s.RegisterService(&ComputePowerClient_ServiceDesc, srv)
}

func _ComputePowerClient_RunPythonPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunPythonPackageClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputePowerClientServer).RunPythonPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComputePowerClient_RunPythonPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputePowerClientServer).RunPythonPackage(ctx, req.(*RunPythonPackageClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputePowerClient_CancelExecPythonPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelExecPythonPackageClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputePowerClientServer).CancelExecPythonPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComputePowerClient_CancelExecPythonPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputePowerClientServer).CancelExecPythonPackage(ctx, req.(*CancelExecPythonPackageClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComputePowerClient_ServiceDesc is the grpc.ServiceDesc for ComputePowerClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComputePowerClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.compute.v1.ComputePowerClient",
	HandlerType: (*ComputePowerClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunPythonPackage",
			Handler:    _ComputePowerClient_RunPythonPackage_Handler,
		},
		{
			MethodName: "CancelExecPythonPackage",
			Handler:    _ComputePowerClient_CancelExecPythonPackage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/compute/v1/compute_power_client.proto",
}
