// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: api/network/v1/p2p.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	P2P_CreateListen_FullMethodName  = "/api.network.v1.P2p/CreateListen"
	P2P_CreateForward_FullMethodName = "/api.network.v1.P2p/CreateForward"
	P2P_CloseListen_FullMethodName   = "/api.network.v1.P2p/CloseListen"
	P2P_ListListen_FullMethodName    = "/api.network.v1.P2p/ListListen"
)

// P2PClient is the client API for P2P service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type P2PClient interface {
	CreateListen(ctx context.Context, in *CreateListenRequest, opts ...grpc.CallOption) (*CreateListenReply, error)
	CreateForward(ctx context.Context, in *CreateForwardRequest, opts ...grpc.CallOption) (*CreateForwardReply, error)
	CloseListen(ctx context.Context, in *CloseListenRequest, opts ...grpc.CallOption) (*CloseListenReply, error)
	ListListen(ctx context.Context, in *ListListenRequest, opts ...grpc.CallOption) (*ListListenReply, error)
}

type p2PClient struct {
	cc grpc.ClientConnInterface
}

func NewP2PClient(cc grpc.ClientConnInterface) P2PClient {
	return &p2PClient{cc}
}

func (c *p2PClient) CreateListen(ctx context.Context, in *CreateListenRequest, opts ...grpc.CallOption) (*CreateListenReply, error) {
	out := new(CreateListenReply)
	err := c.cc.Invoke(ctx, P2P_CreateListen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) CreateForward(ctx context.Context, in *CreateForwardRequest, opts ...grpc.CallOption) (*CreateForwardReply, error) {
	out := new(CreateForwardReply)
	err := c.cc.Invoke(ctx, P2P_CreateForward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) CloseListen(ctx context.Context, in *CloseListenRequest, opts ...grpc.CallOption) (*CloseListenReply, error) {
	out := new(CloseListenReply)
	err := c.cc.Invoke(ctx, P2P_CloseListen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PClient) ListListen(ctx context.Context, in *ListListenRequest, opts ...grpc.CallOption) (*ListListenReply, error) {
	out := new(ListListenReply)
	err := c.cc.Invoke(ctx, P2P_ListListen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// P2PServer is the server API for P2P service.
// All implementations must embed UnimplementedP2PServer
// for forward compatibility
type P2PServer interface {
	CreateListen(context.Context, *CreateListenRequest) (*CreateListenReply, error)
	CreateForward(context.Context, *CreateForwardRequest) (*CreateForwardReply, error)
	CloseListen(context.Context, *CloseListenRequest) (*CloseListenReply, error)
	ListListen(context.Context, *ListListenRequest) (*ListListenReply, error)
	mustEmbedUnimplementedP2PServer()
}

// UnimplementedP2PServer must be embedded to have forward compatible implementations.
type UnimplementedP2PServer struct {
}

func (UnimplementedP2PServer) CreateListen(context.Context, *CreateListenRequest) (*CreateListenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateListen not implemented")
}
func (UnimplementedP2PServer) CreateForward(context.Context, *CreateForwardRequest) (*CreateForwardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateForward not implemented")
}
func (UnimplementedP2PServer) CloseListen(context.Context, *CloseListenRequest) (*CloseListenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseListen not implemented")
}
func (UnimplementedP2PServer) ListListen(context.Context, *ListListenRequest) (*ListListenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListListen not implemented")
}
func (UnimplementedP2PServer) mustEmbedUnimplementedP2PServer() {}

// UnsafeP2PServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to P2PServer will
// result in compilation errors.
type UnsafeP2PServer interface {
	mustEmbedUnimplementedP2PServer()
}

func RegisterP2PServer(s grpc.ServiceRegistrar, srv P2PServer) {
	s.RegisterService(&P2P_ServiceDesc, srv)
}

func _P2P_CreateListen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateListenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).CreateListen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2P_CreateListen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).CreateListen(ctx, req.(*CreateListenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_CreateForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateForwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).CreateForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2P_CreateForward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).CreateForward(ctx, req.(*CreateForwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_CloseListen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseListenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).CloseListen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2P_CloseListen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).CloseListen(ctx, req.(*CloseListenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2P_ListListen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListListenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServer).ListListen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2P_ListListen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServer).ListListen(ctx, req.(*ListListenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// P2P_ServiceDesc is the grpc.ServiceDesc for P2P service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var P2P_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.network.v1.P2p",
	HandlerType: (*P2PServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateListen",
			Handler:    _P2P_CreateListen_Handler,
		},
		{
			MethodName: "CreateForward",
			Handler:    _P2P_CreateForward_Handler,
		},
		{
			MethodName: "CloseListen",
			Handler:    _P2P_CloseListen_Handler,
		},
		{
			MethodName: "ListListen",
			Handler:    _P2P_ListListen_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/network/v1/p2p.proto",
}
